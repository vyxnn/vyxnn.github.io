I" <h1 id="personal-website">Personal Website</h1>

<p><a href="https://github.com/vyxnn/vyxnn.github.io"><strong>Github</strong></a></p>

<p><em>My goals for this was mainly to improve my CSS skills from the <a href="/2020/10/30/cportfolio.html">cPortfolio</a> Project. Also had the added bonus of being able to design something new, learning more html, markdown and how to create a static website in preparation for my next project. This post is mainly for recording my own progress.</em></p>

<h3 id="zooming">Zooming</h3>

<p>The main issue with the CSS in cPortfolio <em>(the first time I ever used CSS)</em> was not having a div containing all the elements I wanted, and using absolute positioning for each element. As a result, whenever I zoomed out all the elements would go to the left and it resulted in a very strange looking website. Using Facebook as a reference, I decided that for this website, when zooming out I wanted all the contents of the page to still be centered. This was done by creating a containing <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> with a max width and containing every other element inside that. It was a very simple fix that stopped unwanted behaviour such as expanding navigation/side bars. The main takeaway for this was that <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> solves everything.</p>

<h3 id="stacking-variable-height-div-in-columns">Stacking variable height <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> in columns</h3>

<p>This was a problem that I came across while designing the <a href="/projects">Project</a> page. As I like having pictures in my posts, I had a lot of different sized <code class="language-plaintext highlighter-rouge">&lt;div&gt;</code> elements. When stacking them using <code class="language-plaintext highlighter-rouge">float:left</code>, I ended up with a lot of empty space depending on the elements as though you can have different sized elements, the new row will start based on the max height of the previous row. I had a few responses to this issue, the first being looking it up on stack exchange. Unfortunately for me a lot of the responses involved jQuery or some form of javascript, while others suggested to use <code class="language-plaintext highlighter-rouge">float:left</code> and <code class="language-plaintext highlighter-rouge">float:right</code> for a two columns. Another suggestion that came up was to use a <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">flex-box</a> container, so that <code class="language-plaintext highlighter-rouge">align-items:flex-start</code> could be used. Unfortunately after rearranging all my containers, it just gave me the same result as previously using <code class="language-plaintext highlighter-rouge">float:left</code>. Eventually I gave up on finding a pure CSS solution and decided to use <a href="https://masonry.desandro.com/">Masonry</a>, which required very little set-up and ended up being a very simple solution to my problem. All I had to do was define the post containers and adjust the size values until I got the design I wanted. It was a bit unfortunate that my hours of trying to improve my CSS skills ended up being solved with a <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> package, but I guess that knowing the limitations of CSS could be considered an improvement.</p>

<table>
  <tbody>
    <tr>
      <td><img src="/images/emptyspacediv.png" alt="" class="img-responsive" width="425px" /></td>
      <td>Â </td>
      <td><img src="/images/goodspacediv.png" alt="emptyspace" class="img-responsive" width="425px" /></td>
    </tr>
    <tr>
      <td><em>Default behaviour</em></td>
      <td>Â </td>
      <td><em>Intended behaviour</em></td>
    </tr>
  </tbody>
</table>

<h3 id="learning-how-to-use-markdown">Learning how to use Markdown</h3>
<p><em>ft. A lot of help from this <a href="https://www.markdownguide.org/basic-syntax/">source</a>.</em></p>

<p>Initially I wanted to go with <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> posts instead of markdown, as I donâ€™t really like the concept of having the same design for each page, and <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> would give me the freedom to design every page as I want it. Unfortunately that is incredibly time consuming, and Jekyll makes markdown very easy to use regardless so I may as well use it. Admittedly after the pain of using latex to write all my notes last year, markdown is comparatively much easier to use, and I realised I could still incoporate <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> elements if necessary.</p>

<p>Aside from all the syntax of markdown, there are a few unusual points and workarounds I noticed when using it.</p>
<ul>
  <li>
    <p><strong>Layout of pictures</strong> <br />
  Markdown doesnâ€™t really have a way to caption images, and <code class="language-plaintext highlighter-rouge">&lt;html&gt;</code> is limited in the placement of the picture. When you want to place and caption multiple pictures in a row, using a markdown table is a very easy way to display it. CSS can also be used to adjust the default table in markdown.</p>
  </li>
  <li>
    <p><strong>Nesting markdown</strong><br />
  Most of the time the order of the syntax doesnâ€™t matter if it is applicable to the whole word, but the combination of Lists and Text Emphasis only works when list syntax (-) is before the text emphasis (*)</p>
  </li>
  <li>
    <p><strong>Requires Spacing</strong></p>
    <ul>
      <li>Headings (#)</li>
      <li>Lists (-)</li>
      <li>New lines (require two empty spaces after a line)</li>
    </ul>
  </li>
</ul>
:ET